resources:
  repositories:
    - repository: self

trigger:
  branches:
    include:
      - master

pr:
  autoCancel: false
  branches:
    include:
      - master

variables:
  pathToTheProjectFile: '$(Build.SourcesDirectory)/src/Qala.Cli/Qala.Cli.csproj' 
  pathToTheProjectTestFile: '$(Build.SourcesDirectory)/tests/Qala.Cli.Integration.Tests/Qala.Cli.Integration.Tests.csproj' 
  runtimeIdentifiers: 'win-x64;win-arm64;linux-x64;osx-arm64'
  gitHubConnection: 'github.com_tvcosta'
  npmConnection: 'npm_tiagoqalatech'
  repositoryName: 'QalaTech/qala-cli'
  major: 1
  minor: 0
  patch: $[counter(variables['major'], 0)]

pool:
  vmImage: ubuntu-latest

stages:              
- stage: Build
  displayName: "Build CLI Application"
  jobs:
    - job: Build
      displayName: "Build and Package CLI"
      strategy:
        matrix:
          Windows:
            vmImage: 'windows-latest'
            runtimeIdentifiers: 'win-x64;win-arm64'
          Linux:
            vmImage: 'ubuntu-latest'
            runtimeIdentifiers: 'linux-x64'
          macOS:
            vmImage: 'macOS-latest'
            runtimeIdentifiers: 'osx-arm64'
      pool: 
        vmImage: '$(vmImage)'
      steps: 
        # Modify the config.yaml with variable values from the pipeline
        - task: PowerShell@2
          displayName: "Generate and Replace config.yaml"
          inputs:
            targetType: 'inline'
            script: |
              $configPath = "$(Build.SourcesDirectory)/src/Qala.Cli/config.yaml"

              # Ensure the directory exists
              if (!(Test-Path -Path (Split-Path -Path $configPath))) {
                  New-Item -ItemType Directory -Path (Split-Path -Path $configPath) -Force
              }

              # Generate new config.yaml content
              $configContent = @"
              Auth:
                URL: "$(AUTH_URL)"
                ClientID: "$(AUTH_CLIENT_ID)"
                Audience: "$(AUTH_AUDIENCE)"

              Management-API:
                URL: "$(MANAGEMENT_API)"
              "@

              # Overwrite the existing config.yaml
              $configContent | Set-Content -Path $configPath -Encoding utf8 -Force

              Write-Host "Replaced existing config.yaml successfully!"

        # Restore NuGet Packages
        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet Packages'
          condition: succeeded()
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        # Run tests
        # - task: DotNetCoreCLI@2
        #   displayName: 'Run tests'
        #   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), in(variables['Build.SourceBranch'], 'refs/heads/master'))
        #   inputs:
        #     command: 'test'
        #     projects: '$(pathToTheProjectTestFile)'

        # Build and publish Alpha executables
        - task: PowerShell@2
          displayName: 'Publish Alpha executables'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              # Check if the pathToTheProjectFile file exists
              if (Test-Path $(pathToTheProjectFile)) {
                  Write-Host "Qala.Cli.csproj file found."
              } else {
                  Write-Host "Qala.Cli.csproj file not found."
                  exit 1
              }
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Publishing Alpha version for runtime: $rid"
                dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Build.ArtifactStagingDirectory)/alpha/$rid"
              }
        
        # Publish the Alpha executables as an artifact
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "alphaPublishedFiles$(vmImage)"

- ${{ if and(ne(variables['Build.Reason'], 'PullRequest'), in(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
  - stage: Package
    displayName: "Package CLI Application"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: AlphaVersion
        displayName: "Set Alpha Version"
        steps:
          # Set Alpha Version Number
          - task: PowerShell@2
            name: SetAlphaVersion
            displayName: 'Set Alpha Version Number'
            inputs:
              targetType: 'inline'
              script: |
                # Fetch the previous version from a file or a variable
                $previousVersion = "$(major).$(minor).$(patch)" # Default value if no previous version is found
                if (Test-Path "$(Build.ArtifactStagingDirectory)/previousVersion.txt") {
                  $previousVersion = Get-Content "$(Build.ArtifactStagingDirectory)/currentVersion.txt"
                }

                # Split the previous version into major, minor, and patch
                $versionParts = $previousVersion -split '\.'
                $major = [int]$versionParts[0]
                $minor = [int]$versionParts[1]
                $patch = [int]$versionParts[2]

                # Determine if the branch name starts with hotfix or HOTFIX
                if ($env:BUILD_SOURCEBRANCHNAME -match '^hotfix' -or $env:BUILD_SOURCEBRANCHNAME -match '^HOTFIX') {
                  # Increment the patch version
                  $patch++
                } else {
                  # Increment the minor version
                  $minor++
                }

                # Set the alpha version
                $alphaVersion = "v$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
                Write-Host "##vso[task.setvariable variable=alphaVersion;isOutput=true]$alphaVersion"
                Write-Host "Alpha Version: $alphaVersion"

                # Save the new version to a file for future reference
                $newVersion = "$major.$minor.$patch"
                Set-Content -Path "$(Build.ArtifactStagingDirectory)/currentVersion.txt" -Value $newVersion

      - job: PackageWindows
        displayName: "Package Windows MSI files"
        dependsOn: AlphaVersion
        condition: succeeded()
        variables:
          runtimeIdentifiers: 'win-x64;win-arm64'
          alphaVersion: $[ dependencies.AlphaVersion.outputs['SetAlphaVersion.alphaVersion'] ]
        pool: 
          vmImage: 'windows-latest'
        steps: 
          # Download previous published files artifact
          - download: current
            displayName: 'Download previous published files artifact'
            artifact: "alphaPublishedFileswindows-latest"

          # Install WiX Toolset and UI extensions
          - task: PowerShell@2
            displayName: 'Install WiX Toolset and UI extensions'
            inputs:
              workingDirectory: $(Build.SourcesDirectory)
              targetType: 'inline'
              script: |
                dotnet tool install --global wix --version 5.0.2
                wix extension add WixToolset.UI.wixext/5.0.2
          
          # Create installers for each runtime identifiers
          - task: PowerShell@2
            displayName: 'Create installers for each runtime identifiers'
            condition: succeeded()
            inputs:
              workingDirectory: $(Build.SourcesDirectory)
              targetType: 'inline'
              script: |
                $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
                foreach ($rid in $runtimeIdentifiers) {
                  Write-Host "Generating the msi file for runtime: $rid"
                  wix build $(Build.SourcesDirectory)/build/wix/qala.wxs -d Version="$(major).$(minor)" -d QalaExecutable="$(Pipeline.Workspace)/alphaPublishedFileswindows-latest/alpha/$rid/qala.exe" -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/alpha/$rid/qala-cli-$(alphaVersion)-$rid.msi"
                }
          
          # Move all installers and executables to the artifact staging directory
          - task: PowerShell@2
            displayName: 'Move all installers and executables to the artifact staging directory'
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
                foreach ($rid in $runtimeIdentifiers) {
                  Write-Host "Moving installer and executables for runtime: $rid"
                  $alphaDir = "$(Build.ArtifactStagingDirectory)/alpha"
                  $ridDir = "$alphaDir/$rid"

                  if (-not (Test-Path -Path $alphaDir)) {
                    Write-Host "Creating directory: $alphaDir"
                    New-Item -ItemType Directory -Path $alphaDir
                  }

                  if (-not (Test-Path -Path $ridDir)) {
                    Write-Host "Creating directory: $ridDir"
                    New-Item -ItemType Directory -Path $ridDir
                  }

                  Move-Item -Path "$(Pipeline.Workspace)/alpha/$rid/qala-cli-$(alphaVersion)-$rid.msi" -Destination $ridDir -Force
                }

          # Publish the Alpha Windows package into the artifact staging directory
          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Publish to Artifact Staging Directory'
            artifact: "alphaInstallerWindows"
          
      - job: PackageMacOS
        displayName: "Package macOS NPM module"
        dependsOn: AlphaVersion
        condition: succeeded()
        variables:
          alphaVersion: $[ dependencies.AlphaVersion.outputs['SetAlphaVersion.alphaVersion'] ]
        pool:
          vmImage: 'macOS-latest'
        steps:
          # Download previous published files artifact
          - download: current
            displayName: 'Download previous published files artifact'
            artifact: "alphaPublishedFilesmacOS-latest"

          # Package macOS tarball
          - task: ArchiveFiles@2
            displayName: 'Package macos tarball'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/alphaPublishedFilesmacOS-latest/alpha/osx-arm64/qala'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/alpha/qala-cli-$(alphaVersion)-osx-arm64.tar.gz'

          # Publish the Alpha macOS package into the artifact staging directory
          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Publish to Artifact Staging Directory'
            artifact: "alphaInstallerMacOS"

      - job: PackageLinux
        displayName: "Package Linux Tarball"
        dependsOn: AlphaVersion
        condition: succeeded()
        variables:
          alphaVersion: $[ dependencies.AlphaVersion.outputs['SetAlphaVersion.alphaVersion'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Download previous published files artifact
          - download: current
            displayName: 'Download previous published files artifact'
            artifact: "alphaPublishedFilesubuntu-latest"

          # Package linux tarball
          - task: ArchiveFiles@2
            displayName: 'Package linux tarball'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/alphaPublishedFilesubuntu-latest/alpha/linux-x64/qala'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/alpha/qala-cli-$(alphaVersion)-linux-x64.tar.gz'

          # Publish the Alpha Linux package into the artifact staging directory
          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Publish to Artifact Staging Directory'
            artifact: "alphaInstallerLinux"