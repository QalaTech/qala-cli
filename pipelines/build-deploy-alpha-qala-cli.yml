# Stage Alpha Build And Publish (only for merged from hotfix to release branches and feature to master branches)
resources:
  repositories:
    - repository: self

trigger:
  branches:
    include:
      - release/*
  paths:
    include:
      - src/Qala.Cli.Data
      - src/Qala.Cli

pr:
  autoCancel: false
  branches:
    include:
      - master
  paths:
    exclude:
      - tests/*

variables:
  pathToTheProjectFile: '$(Build.SourcesDirectory)/src/Qala.Cli/Qala.Cli.csproj' 
  pathToTheProjectTestFile: '$(Build.SourcesDirectory)/tests/Qala.Cli.Integration.Tests/Qala.Cli.Integration.Tests.csproj' 
  major: 1
  minor: 0
  patch: $[counter(variables['major'], 0)]
  runtimeIdentifiers: 'win-x64;win-arm64;linux-x64;osx-arm64'
  gitHubConnection: 'github.com_tvcosta'
  npmConnection: 'npm_tiagoqalatech'
  repositoryName: 'QalaTech/qala-cli'
  alphaVersion: ''
  releaseVersion: ''

pool:
  vmImage: ubuntu-latest

stages:
- stage: AlphaVersion
  displayName: "Alpha Version"
  jobs:
    - job: AlphaVersion
      displayName: "Set Alpha Version"
      steps:
        # Set Alpha Version Number
        - task: PowerShell@2
          displayName: 'Set Alpha Version Number'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            script: |
              # Fetch the previous version from a file or a variable
              $previousVersion = "$(major).$(minor).$(patch)" # Default value if no previous version is found
              if (Test-Path "$(Build.ArtifactStagingDirectory)/previousVersion.txt") {
                $previousVersion = Get-Content "$(Build.ArtifactStagingDirectory)/currentVersion.txt"
              }

              # Split the previous version into major, minor, and patch
              $versionParts = $previousVersion -split '\.'
              $major = [int]$versionParts[0]
              $minor = [int]$versionParts[1]
              $patch = [int]$versionParts[2]

              # Determine if the branch name starts with hotfix or HOTFIX
              if ($env:BUILD_SOURCEBRANCHNAME -match '^hotfix' -or $env:BUILD_SOURCEBRANCHNAME -match '^HOTFIX') {
                # Increment the patch version
                $patch++
              } else {
                # Increment the minor version
                $minor++
              }

              # Set the alpha version
              $alphaVersion = "v$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
              Write-Host "##vso[task.setvariable variable=alphaVersion]$alphaVersion"
              Write-Host "Alpha Version: $alphaVersion"

              # Save the new version to a file for future reference
              $newVersion = "$major.$minor.$patch"
              Set-Content -Path "$(Build.ArtifactStagingDirectory)/currentVersion.txt" -Value $newVersion
        
        - script: echo "##vso[task.setvariable variable=alphaVersion;isOutput=true]$(alphaVersion)"
          displayName: 'Set the output variable alphaVersion'
          name: setVersion  

              
- stage: Build
  displayName: "Build CLI Application"
  dependsOn: AlphaVersion
  condition: succeeded()
  jobs:
    - job: Build
      displayName: "Build and Package CLI"
      strategy:
        matrix:
          Windows:
            vmImage: 'windows-latest'
            runtimeIdentifiers: 'win-x64;win-arm64'
          Linux:
            vmImage: 'ubuntu-latest'
            runtimeIdentifiers: 'linux-x64'
          # macOS:
          #   vmImage: 'macOS-latest'
          #   runtimeIdentifiers: 'osx-arm64'
      pool: 
        vmImage: '$(vmImage)'
      steps: 
        # Restore NuGet Packages
        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet Packages'
          condition: succeeded()
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        # Build and publish Alpha executables
        - task: PowerShell@2
          displayName: 'Publish Alpha executables'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              # Check if the pathToTheProjectFile file exists
              if (Test-Path $(pathToTheProjectFile)) {
                  Write-Host "Qala.Cli.csproj file found."
              } else {
                  Write-Host "Qala.Cli.csproj file not found."
                  exit 1
              }
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Publishing Alpha version for runtime: $rid"
                dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Build.ArtifactStagingDirectory)/alpha/$rid"
              }
        
        # Publish the Alpha executables as an artifact
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "alphaPublishedFiles$(vmImage)"

- stage: Package
  displayName: "Package CLI Application"
  dependsOn: Build
  condition: succeeded()
  variables:
    alphaVersion: $[ dependencies.Build.outputs['AlphaVersion.setVersion.alphaVersion'] ]
  jobs:
    - job: PackageWindows
      displayName: "Package Windows MSI files"
      pool: 
        vmImage: 'windows-latest'
      variables:
        runtimeIdentifiers: 'win-x64;win-arm64'
      steps: 
        # Download previous published files artifact
        - download: current
          displayName: 'Download previous published files artifact'
          artifact: "alphaPublishedFileswindows-latest"

        # Install WiX Toolset and UI extensions
        - task: PowerShell@2
          displayName: 'Install WiX Toolset and UI extensions'
          inputs:
            workingDirectory: $(Build.SourcesDirectory)
            targetType: 'inline'
            script: |
              dotnet tool install --global wix --version 5.0.2
              wix extension add WixToolset.UI.wixext/5.0.2
        
        # Create installers for each runtime identifiers
        - task: PowerShell@2
          displayName: 'Create installers for each runtime identifiers'
          condition: succeeded()
          inputs:
            workingDirectory: $(Build.SourcesDirectory)
            targetType: 'inline'
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Generating the msi file for runtime: $rid"
                wix build $(Build.SourcesDirectory)/build/wix/qala.wxs -d Version="$(major).$(minor)" -d QalaExecutable="$(Pipeline.Workspace)/alphaPublishedFileswindows-latest/alpha/$rid/qala.exe" -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/alpha/$rid/qala-cli-$(alphaVersion)-$rid.msi"
              }
        
        # Move all installers and executables to the artifact staging directory
        - task: PowerShell@2
          displayName: 'Move all installers and executables to the artifact staging directory'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Moving installer and executables for runtime: $rid"
                $alphaDir = "$(Build.ArtifactStagingDirectory)/alpha"
                $ridDir = "$alphaDir/$rid"

                if (-not (Test-Path -Path $alphaDir)) {
                  Write-Host "Creating directory: $alphaDir"
                  New-Item -ItemType Directory -Path $alphaDir
                }

                if (-not (Test-Path -Path $ridDir)) {
                  Write-Host "Creating directory: $ridDir"
                  New-Item -ItemType Directory -Path $ridDir
                }

                Move-Item -Path "$(Pipeline.Workspace)/alpha/$rid/qala-cli-$(alphaVersion)-$rid.msi" -Destination $ridDir -Force
              }
        
    # - job: PackageMacOS
    #   displayName: "Package macOS NPM module"
    #   pool:
    #     vmImage: 'macOS-latest'
    #   steps:
    #     # Download previous published files artifact
    #     - download: current
    #       displayName: 'Download previous published files artifact'
    #       artifact: "alphaPublishedFilesmacOS-latest"

    #     # Update the version in the package.json file
    #     - task: PowerShell@2
    #       displayName: 'Update the version in the package.json file'
    #       inputs:
    #         targetType: 'inline'
    #         script: |
    #           $packageJsonPath = "$(Build.SourcesDirectory)/build/npm/package.json"
    #           $packageJson = Get-Content -Path $packageJsonPath -Raw | ConvertFrom-Json
    #           $packageJson.version = "$(alphaVersion)"
    #           $packageJson | ConvertTo-Json -Depth 32 | Set-Content -Path $packageJsonPath

    #     # Install Node.js
    #     - task: NodeTool@0
    #       displayName: 'Install Node.js'
    #       condition: succeeded()
    #       inputs:
    #         versionSpec: '20.x'

    #     # Authenticate npm
    #     - task: npmAuthenticate@0
    #       displayName: 'Authenticate npm'
    #       condition: succeeded()
    #       inputs:
    #         workingFile: '$(Build.SourcesDirectory)/build/npm/.npmrc'
    #         customEndpoint: '$(npmConnection)'

    #     # Publish npm package
    #     - task: Npm@1
    #       displayName: 'Publish Alpha npm package'
    #       condition: succeeded()
    #       inputs:
    #         command: 'custom'
    #         customCommand: 'publish --access public --tag alpha'
    #         workingDir: '$(Build.SourcesDirectory)/build/npm'
    #         publishRegistry: 'useExternalRegistry'
    #         publishEndpoint: '$(npmConnection)'

    - job: PackageLinux
      displayName: "Package Linux Tarball"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        # Download previous published files artifact
        - download: current
          displayName: 'Download previous published files artifact'
          artifact: "alphaPublishedFilesubuntu-latest"

        # Package linux tarball
        - task: ArchiveFiles@2
          displayName: 'Package linux tarball'
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/alphaPublishedFilesubuntu-latest/alpha/linux-x64/qala'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/alpha/qala-cli-$(alphaVersion)-linux-x64.tar.gz'

    - job: GithubRelease
      displayName: Create Github Release
      dependsOn:
        - PackageWindows
        - PackageLinux
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        # Create GitHub Alpha Release with Windows and Linux assets
        - task: GithubRelease@1 
          displayName: 'Create GitHub Alpha Release'
          inputs:
            gitHubConnection: '$(gitHubConnection)'
            repositoryName: '$(repositoryName)'
            target: '$(Build.SourceBranchName)'
            tagSource: 'userSpecifiedTag'
            tag: "$(alphaVersion)"
            isPreRelease: true
            title: 'Alpha Release $(alphaVersion)'   
            assets: |
              $(Build.ArtifactStagingDirectory)/alpha/*/*.msi
              $(Build.ArtifactStagingDirectory)/alpha/*.tar.gz  