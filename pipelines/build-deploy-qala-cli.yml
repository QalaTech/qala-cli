resources:
  repositories:
    - repository: self

trigger:
  branches:
    include:
      - releases/*

variables:
  pathToTheProjectFile: '$(Build.SourcesDirectory)/src/Qala.Cli/Qala.Cli.csproj' 
  pathToTheProjectTestFile: '$(Build.SourcesDirectory)/tests/Qala.Cli.Integration.Tests/Qala.Cli.Integration.Tests.csproj' 
  runtimeIdentifiers: 'win-x64;win-arm64;linux-x64;osx-arm64'
  gitHubConnection: 'github.com_release'
  npmConnection: 'QalaTech_NPM'
  repositoryName: 'QalaTech/qala-cli'
  major: 1
  minor: 0
  patch: $[counter(variables['major'], 0)]

pool:
  vmImage: ubuntu-latest

stages:              
- stage: Build
  displayName: "Build CLI Application"
  jobs:
    - job: Build
      displayName: "Build and Package CLI"
      strategy:
        matrix:
          Windows:
            vmImage: 'windows-latest'
            runtimeIdentifiers: 'win-x64;win-arm64'
          Linux:
            vmImage: 'ubuntu-latest'
            runtimeIdentifiers: 'linux-x64'
          macOS:
            vmImage: 'macOS-latest'
            runtimeIdentifiers: 'osx-arm64'
      pool: 
        vmImage: '$(vmImage)'
      steps: 
        # Restore NuGet Packages
        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet Packages'
          condition: succeeded()
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        # Build and publish Release executables
        - task: PowerShell@2
          displayName: 'Publish Release executables'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
            script: |
              $configPath = "$(Build.SourcesDirectory)/src/Qala.Cli/config.yaml"

              # Ensure the directory exists
              if (!(Test-Path -Path (Split-Path -Path $configPath))) {
                  New-Item -ItemType Directory -Path (Split-Path -Path $configPath) -Force
              }

              # Fetch environment variables properly
              $authUrl = $env:AUTH_URL
              $authClientId = $env:AUTH_CLIENT_ID
              $authAudience = $env:AUTH_AUDIENCE
              $managementApi = $env:MANAGEMENT_API

              # Generate new config.yaml content
              $configContent = @"
              Auth:
                URL: "$authUrl"
                ClientID: "$authClientId"
                Audience: "$authAudience"

              Management-API:
                URL: "$managementApi"
              "@

              # Overwrite the existing config.yaml
              $configContent | Set-Content -Path $configPath -Encoding utf8 -Force

              Write-Host "Replaced existing config.yaml successfully!"

              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              # Check if the pathToTheProjectFile file exists
              if (Test-Path $(pathToTheProjectFile)) {
                  Write-Host "Qala.Cli.csproj file found."
              } else {
                  Write-Host "Qala.Cli.csproj file not found."
                  exit 1
              }
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Publishing Release version for runtime: $rid"
                dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Build.ArtifactStagingDirectory)/release/$rid"
              }
        
        # Publish the Release executables as an artifact
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "releasePublishedFiles$(vmImage)"

- stage: Package
  displayName: "Package CLI Application"
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: ReleaseVersion
      displayName: "Set Release Version"
      steps:
        # Set Release Version Number
        - task: PowerShell@2
          name: SetReleaseVersion
          displayName: 'Set Release Version Number'
          inputs:
            targetType: 'inline'
            script: |
              # Extract the version from the branch name
              $branchName = "$(Build.SourceBranchName)"
              if ($branchName -match 'qala-cli-(\d+)\.(\d+)\.(\d+)') {
                $major = [int]$matches[1]
                $minor = [int]$matches[2]
                $patch = [int]$matches[3]
              } else {
                throw "Branch name does not match the expected pattern 'qala-cli-{major}.{minor}.{patch}'"
              }

              # Set the release version
              $releaseVersion = "v$major.$minor.$patch"
              Write-Host "##vso[task.setvariable variable=releaseVersion;isOutput=true]$releaseVersion"
              Write-Host "Release Version: $releaseVersion"

              # Save the new version to a file for future reference
              $newVersion = "$major.$minor.$patch"
              Set-Content -Path "$(Build.ArtifactStagingDirectory)/currentVersion.txt" -Value $newVersion

    - job: PackageWindows
      displayName: "Package Windows MSI files"
      dependsOn: ReleaseVersion
      condition: succeeded()
      variables:
        runtimeIdentifiers: 'win-x64;win-arm64'
        releaseVersion: $[ dependencies.ReleaseVersion.outputs['SetReleaseVersion.releaseVersion'] ]
      pool: 
        vmImage: 'windows-latest'
      steps: 
        # Download previous published files artifact
        - download: current
          displayName: 'Download previous published files artifact'
          artifact: "releasePublishedFileswindows-latest"

        # Install WiX Toolset and UI extensions
        - task: PowerShell@2
          displayName: 'Install WiX Toolset and UI extensions'
          inputs:
            workingDirectory: $(Build.SourcesDirectory)
            targetType: 'inline'
            script: |
              dotnet tool install --global wix --version 5.0.2
              wix extension add WixToolset.UI.wixext/5.0.2
        
        # Create installers for each runtime identifiers
        - task: PowerShell@2
          displayName: 'Create installers for each runtime identifiers'
          condition: succeeded()
          inputs:
            workingDirectory: $(Build.SourcesDirectory)
            targetType: 'inline'
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Generating the msi file for runtime: $rid"
                wix build $(Build.SourcesDirectory)/build/wix/qala.wxs -d Version="$(major).$(minor)" -d QalaExecutable="$(Pipeline.Workspace)/releasePublishedFileswindows-latest/release/$rid/qala.exe" -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/release/$rid/qala-cli-$(releaseVersion)-$rid.msi"
              }
        
        # Move all installers and executables to the artifact staging directory
        - task: PowerShell@2
          displayName: 'Move all installers and executables to the artifact staging directory'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            script: |
              $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
              foreach ($rid in $runtimeIdentifiers) {
                Write-Host "Moving installer and executables for runtime: $rid"
                $releaseDir = "$(Build.ArtifactStagingDirectory)/release"
                $ridDir = "$releaseDir/$rid"

                if (-not (Test-Path -Path $releaseDir)) {
                  Write-Host "Creating directory: $releaseDir"
                  New-Item -ItemType Directory -Path $releaseDir
                }

                if (-not (Test-Path -Path $ridDir)) {
                  Write-Host "Creating directory: $ridDir"
                  New-Item -ItemType Directory -Path $ridDir
                }

                Move-Item -Path "$(Pipeline.Workspace)/release/$rid/qala-cli-$(releaseVersion)-$rid.msi" -Destination $ridDir -Force
              }

        # Publish the Release Windows package into the artifact staging directory
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "releaseInstallerWindows"
        
    - job: PackageMacOS
      displayName: "Package macOS NPM module"
      dependsOn: ReleaseVersion
      condition: succeeded()
      variables:
       releaseVersion: $[ dependencies.ReleaseVersion.outputs['SetReleaseVersion.releaseVersion'] ]
      pool:
        vmImage: 'macOS-latest'
      steps:
        # Download previous published files artifact
        - download: current
          displayName: 'Download previous published files artifact'
          artifact: "releasePublishedFilesmacOS-latest"

        # Package macOS tarball
        - task: ArchiveFiles@2
          displayName: 'Package macos tarball'
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/releasePublishedFilesmacOS-latest/release/osx-arm64/qala'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/release/qala-cli-$(releaseVersion)-osx-arm64.tar.gz'

        # Publish the Release macOS package into the artifact staging directory
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "releaseInstallerMacOS"

        # Move the executable files into a bin folder inside the npm folder
        - task: CopyFiles@2
          displayName: 'Move the executable file into a bin folder inside the npm folder'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/releasePublishedFilesmacOS-latest/release/osx-arm64'
            Contents: 'qala'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/macos/bin'

        # Move the config.yaml file into the npm folder
        - task: CopyFiles@2
          displayName: 'Move the config.yaml file into a bin folder inside the npm folder'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/releasePublishedFilesmacOS-latest/release/osx-arm64'
            Contents: 'config.yaml'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/macos/bin'

        # Move the README.md file into the npm folder
        - task: CopyFiles@2
          displayName: 'Move the README.md file into the npm folder'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)'
            Contents: 'README.md'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/macos'

        # Update the version in the package.json file
        - task: PowerShell@2
          displayName: 'Update the version in the package.json file'
          inputs:
            targetType: 'inline'
            script: |
              $packageJsonPath = "$(Build.SourcesDirectory)/build/npm/macos/package.json"
              $packageJson = Get-Content -Path $packageJsonPath -Raw | ConvertFrom-Json
              $packageJson.version = "$(releaseVersion)"
              $packageJson | ConvertTo-Json -Depth 32 | Set-Content -Path $packageJsonPath

        # Authenticate npm
        - task: npmAuthenticate@0
          displayName: 'Authenticate npm'
          condition: succeeded()
          inputs:
            workingFile: '$(Build.SourcesDirectory)/build/npm/macos/.npmrc'
            customEndpoint: '$(npmConnection)'

        # Publish npm package
        - task: Npm@1
          displayName: 'Publish Release npm package'
          condition: succeeded()
          inputs:
            command: 'custom'
            customCommand: 'publish --access public'
            workingDir: '$(Build.SourcesDirectory)/build/npm/macos'
            publishRegistry: 'useExternalRegistry'
            publishEndpoint: '$(npmConnection)'

    - job: PackageLinux
      displayName: "Package Linux Tarball"
      dependsOn: ReleaseVersion
      condition: succeeded()
      variables:
        releaseVersion: $[ dependencies.ReleaseVersion.outputs['SetReleaseVersion.releaseVersion'] ]
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        # Download previous published files artifact
        - download: current
          displayName: 'Download previous published files artifact'
          artifact: "releasePublishedFilesubuntu-latest"

        # Package linux tarball
        - task: ArchiveFiles@2
          displayName: 'Package linux tarball'
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/releasePublishedFilesubuntu-latest/release/linux-x64/qala'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/release/qala-cli-$(releaseVersion)-linux-x64.tar.gz'

        # Publish the Release Linux package into the artifact staging directory
        - publish: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Publish to Artifact Staging Directory'
          artifact: "releaseInstallerLinux"

        # Move the executable files into a bin folder inside the npm folder
        - task: CopyFiles@2
          displayName: 'Move the executable file into a bin folder inside the npm folder'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/releasePublishedFilesubuntu-latest/release/linux-x64'
            Contents: 'qala'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/linux/bin'

        # Move the config.yaml file into the npm folder
        - task: CopyFiles@2
          displayName: 'Move the config.yaml file into a bin folder inside the npm folder'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/releasePublishedFilesubuntu-latest/release/linux-x64'
            Contents: 'config.yaml'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/linux/bin'

        # Move the README.md file into the npm folder
        - task: CopyFiles@2
          displayName: 'Move the README.md file into the npm folder'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)'
            Contents: 'README.md'
            TargetFolder: '$(Build.SourcesDirectory)/build/npm/linux'

        # Update the version in the package.json file
        - task: PowerShell@2
          displayName: 'Update the version in the package.json file'
          inputs:
            targetType: 'inline'
            script: |
              $packageJsonPath = "$(Build.SourcesDirectory)/build/npm/linux/package.json"
              $packageJson = Get-Content -Path $packageJsonPath -Raw | ConvertFrom-Json
              $packageJson.version = "$(releaseVersion)"
              $packageJson | ConvertTo-Json -Depth 32 | Set-Content -Path $packageJsonPath

        # Authenticate npm
        - task: npmAuthenticate@0
          displayName: 'Authenticate npm'
          condition: succeeded()
          inputs:
            workingFile: '$(Build.SourcesDirectory)/build/npm/linux/.npmrc'
            customEndpoint: '$(npmConnection)'

        # Publish npm package
        - task: Npm@1
          displayName: 'Publish Release npm package'
          condition: succeeded()
          inputs:
            command: 'custom'
            customCommand: 'publish --access public'
            workingDir: '$(Build.SourcesDirectory)/build/npm/linux'
            publishRegistry: 'useExternalRegistry'
            publishEndpoint: '$(npmConnection)'

    - job: GithubRelease
      displayName: Create Github Release
      dependsOn:
        - ReleaseVersion
        - PackageWindows
        - PackageMacOS
        - PackageLinux
      condition: succeeded()
      variables:
        releaseVersion: $[ dependencies.ReleaseVersion.outputs['SetReleaseVersion.releaseVersion'] ]
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        # Download previous installer linux file in artifact
        - download: current
          displayName: 'Download previous package linux file in artifact'
          artifact: "releaseInstallerLinux"

        # Download previous installer windows file in artifact
        - download: current
          displayName: 'Download previous package windows file in artifact'
          artifact: "releaseInstallerWindows"

        # Download previous installer macos file in artifact
        - download: current
          displayName: 'Download previous package macOS file in artifact'
          artifact: "releaseInstallerMacOS"
        
        # Create GitHub Release Release with Windows and Linux assets
        - task: GithubRelease@1 
          displayName: 'Create GitHub Release Release'
          inputs:
            gitHubConnection: '$(gitHubConnection)'
            repositoryName: '$(repositoryName)'
            target: '$(Build.SourceBranch)'
            tagSource: 'userSpecifiedTag'
            tag: "$(releaseVersion)"
            isPreRelease: true
            title: 'Release $(releaseVersion)'   
            assets: |
              $(Pipeline.Workspace)/releaseInstallerMacOS/release/*.tar.gz
              $(Pipeline.Workspace)/releaseInstallerWindows/release/*/*.msi
              $(Pipeline.Workspace)/releaseInstallerLinux/release/*.tar.gz
              $(Pipeline.Workspace)/releaseInstallerMacOS/release/*.tar.gz
