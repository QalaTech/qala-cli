# Build and push an image to GitHub Releases and respective hub repositories
name: $(Date:yyyy.MMdd).$(Rev:r)

resources:
  repositories:
    - repository: self

trigger:
  branches:
    include:
      - master
      - development

variables:
  pathToTheProjectFile: '$(Build.SourcesDirectory)/src/Qala.Cli/Qala.Cli.csproj'
  major: 0
  minor: $[counter(variables['major'], 0)]
  patch: $[counter(format('{0}.{1}',variables['major'],variables['minor']),0)]
  runtimeIdentifiers: 'win-x64;win-arm64'
  gitHubConnection: 'github.com_release'
  repositoryName: 'QalaTech/qala-cli'
  pathToTheWiXFile: '$(Build.SourcesDirectory)/build/wix/qala.wxs'
  alphaVersion: ''
  alphaVersionMsi: ''
  releaseVersion: ''
  releaseVersionMsi: ''

pool:
  vmImage: windows-latest

stages:
# Stage Alpha
# Only run for development branch
- stage: Alpha
  condition: in(variables['Build.SourceBranch'], 'refs/heads/development')
  displayName: "Deploy to Alpha"
  jobs:
  # Build and Publish Alpha Executables and Installers
  - job: BuildAndPublishAlpha
    displayName: "Build and Publish Alpha Executables and Installers"
    steps:
    # Install SDK Using global.json
    - task: UseDotNet@2
      displayName: 'Install SDK Using global.json'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: $(Pipeline.Workspace)/s

    # Restore NuGet Packages
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      condition: succeeded()
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # Run tests
    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      condition: succeeded()
      inputs:
        command: 'test'
        projects: '**/*tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    # Set Version Number
    - task: PowerShell@2
      displayName: 'Set Alpha Version Number'
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: |
          # Fetch the previous version from a file or a variable
          $possibleVersion = "$(major).$(minor).$(patch)" # Default value if no previous version is found

          # Split the previous version into major, minor, and patch
          $versionParts = $possibleVersion -split '\.'
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]

          # Determine if the branch name starts with hotfix or HOTFIX
          if ($env:BUILD_SOURCEBRANCHNAME -match '^hotfix' -or $env:BUILD_SOURCEBRANCHNAME -match '^HOTFIX') {
            # Increment the patch version
            $minor--
            Write-Host "##vso[task.setvariable variable=minor]$minor"
          } 

          # Set the alpha version
          $alphaVersion = "v$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
          Write-Host "##vso[task.setvariable variable=alphaVersion]$alphaVersion"
          Write-Host "Alpha Version: $alphaVersion"
          $alphaVersionMsi = "$major.$minor.$patch-alpha"
          Write-Host "##vso[task.setvariable variable=alphaVersionMsi]$alphaVersionMsi"
          Write-Host "Alpha Version for MSI: $alphaVersionMsi"

          # Set the final release version
          $releaseVersion = "v$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
          Write-Host "##vso[task.setvariable variable=releaseVersion]$releaseVersion"
          Write-Host "Final Release Version: $releaseVersion"
          $releaseVersionMsi = "$major.$minor.$patch-alpha"
          Write-Host "##vso[task.setvariable variable=releaseVersionMsi]$releaseVersionMsi"
          Write-Host "Final Release Version for MSI: $releaseVersionMsi"

    # Build and publish Alpha executables
    - task: PowerShell@2
      displayName: 'Build and publish Alpha executables'
      condition: succeeded()
      inputs:
        targetType: 'inline'
        workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          # Check if the pathToTheProjectFile file exists
          if (Test-Path $(pathToTheProjectFile)) {
              Write-Host "Qala.Cli.csproj file found."
          } else {
              Write-Host "Qala.Cli.csproj file not found."
              exit 1
          }
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Publishing Alpha version for runtime: $rid"
            dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Pipeline.Workspace)/alpha/$rid"
          }

    # Install WiX Toolset and UI extensions
    - task: PowerShell@2
      displayName: 'Install WiX Toolset and UI extensions'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        targetType: 'inline'
        script: |
          dotnet tool install --global wix
          wix extension add WixToolset.UI.wixext

    # Create installers for each runtime identifiers
    - task: PowerShell@2
      displayName: 'Create installers for each runtime identifiers'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        targetType: 'inline'
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Generating the msi file for runtime: $rid"
            $wixFileContent = Get-Content -Path $(pathToTheWiXFile)
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToExecutable = ").*?(?=" \?>)', "$(Pipeline.Workspace)/alpha/$rid/qala.exe"
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToBat = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/qala.bat"
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToProductResources = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/resources/"
            Set-Content -Path $(pathToTheWiXFile) -Value $wixFileContent
            wix build $(pathToTheWiXFile) -d Version=$(alphaVersionMsi) -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/alpha/$rid/QalaCliInstaller-$(alphaVersionMsi)-$rid.msi"
          }

    # Change the names of the published executables so you have multiple versions in the same folder
    - task: PowerShell@2
      displayName: 'Change the names of the published executables'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetType: 'inline'
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Changing the name of the executable for runtime: $rid"
            Rename-Item -Path "$(Pipeline.Workspace)/alpha/$rid/qala.exe" -NewName "qala-$rid.exe"
          }

    # Create GitHub Alpha Release
    - task: GithubRelease@1 
      displayName: 'Create GitHub Alpha Release'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        gitHubConnection: '$(gitHubConnection)'
        repositoryName: '$(repositoryName)'
        target: '$(Build.SourceBranchName)'
        tagSource: 'userSpecifiedTag'
        tag: "$(alphaVersion)"
        releaseNotesSource: 'inline'
        releaseNotes: '$(releaseNotes)'
        isPreRelease: true
        title: 'Alpha Release $(alphaVersion)'   
        assets: |
          $(Pipeline.Workspace)/alpha/**/*.msi
          $(Pipeline.Workspace)/alpha/**/*.exe

# Stage Final Release
# Only run for master branch
- stage: Final Release
  condition: in(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: "Deploy to Final Release"
  jobs:
  # Build and Publish Final Release Executables and Installers
  - job: BuildAndPublishRelease
    displayName: "Build and Publish Final Release Executables and Installers"
    steps:
      # Install SDK Using global.json
      - task: UseDotNet@2
        displayName: 'Install SDK Using global.json'
        inputs:
          packageType: 'sdk'
          useGlobalJson: true
          workingDirectory: $(Pipeline.Workspace)/s

      # Restore NuGet Packages
      - task: DotNetCoreCLI@2
        displayName: 'Restore NuGet Packages'
        condition: succeeded()
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      # Run tests
      - task: DotNetCoreCLI@2
        displayName: 'Run tests'
        condition: succeeded()
        inputs:
          command: 'test'
          projects: '**/*tests/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      # Build and publish Final Release executables
      - task: PowerShell@2
        displayName: 'Build and publish Final Release executables'
        condition: succeeded()
        inputs:
          targetType: 'inline'
          workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
          script: |
            $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
            # Check if the pathToTheProjectFile file exists
            if (Test-Path $(pathToTheProjectFile)) {
                Write-Host "Qala.Cli.csproj file found."
            } else {
                Write-Host "Qala.Cli.csproj file not found."
                exit 1
            }
            foreach ($rid in $runtimeIdentifiers) {
              Write-Host "Publishing Final Release version for runtime: $rid"
              dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Pipeline.Workspace)/release/$rid"
            }

      # Install WiX Toolset and UI extensions
      - task: PowerShell@2
        displayName: 'Install WiX Toolset and UI extensions'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          workingDirectory: $(Build.SourcesDirectory)
          targetType: 'inline'
          script: |
            dotnet tool install --global wix
            wix extension add WixToolset.UI.wixext

      # Create installers for each runtime identifiers
      - task: PowerShell@2
        displayName: 'Create installers for each runtime identifiers'
        condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          workingDirectory: $(Build.SourcesDirectory)
          targetType: 'inline'
          script: |
            $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
            foreach ($rid in $runtimeIdentifiers) {
              Write-Host "Generating the msi file for runtime: $rid"
              $wixFileContent = Get-Content -Path $(pathToTheWiXFile)
              $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToExecutable = ").*?(?=" \?>)', "$(Pipeline.Workspace)/release/$rid/qala.exe"
              $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToBat = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/qala.bat"
              $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToProductResources = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/resources/"
              Set-Content -Path $(pathToTheWiXFile) -Value $wixFileContent
              wix build $(pathToTheWiXFile) -d Version=$(releaseVersionMsi) -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/release/$rid/QalaCliInstaller-$(releaseVersionMsi)-$rid.msi"
            }

      # Change the names of the published executables so you have multiple versions in the same folder
      - task: PowerShell@2
        displayName: 'Change the names of the published executables'
        condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: |
            $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
            foreach ($rid in $runtimeIdentifiers) {
              Write-Host "Changing the name of the executable for runtime: $rid"
              Rename-Item -Path "$(Pipeline.Workspace)/release/$rid/qala.exe" -NewName "qala-$rid.exe"
            }

      # Create GitHub Final Release
      - task: GithubRelease@1 
        displayName: 'Create GitHub Final Release'
        condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          gitHubConnection: '$(gitHubConnection)'
          repositoryName: '$(repositoryName)'
          target: '$(Build.SourceBranchName)'
          tagSource: 'userSpecifiedTag'
          tag: "$(releaseVersion)"
          releaseNotesSource: 'inline'
          releaseNotes: '$(releaseNotes)'
          isPreRelease: false
          title: 'Release $(releaseVersion)'   
          assets: |
            $(Pipeline.Workspace)/release/**/*.msi
            $(Pipeline.Workspace)/release/**/*.exe