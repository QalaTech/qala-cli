# Build and push an image to GitHub Releases and respective hub repositories
resources:
  repositories:
    - repository: self

trigger:
  branches:
    include:
      - master
      - development
  paths:
    include:
      - src/Cli

pr:
  autoCancel: false
  branches:
    include:
      - master
      - development
  paths:
    exclude:
      - tests/*

variables:
  pathToTheProjectFile: '$(Build.SourcesDirectory)/src/Qala.Cli/Qala.Cli.csproj'
  major: 0
  minor: 0
  patch: 0
  runtimeIdentifiers: 'win-x64;win-arm64'
  gitHubConnection: 'github.com_tvcosta'
  repositoryName: 'QalaTech/qala-cli'
  pathToTheWiXFile: '$(Build.SourcesDirectory)/build/wix/qala.wxs'
  alphaVersion: ''
  alphaVersionMsi: ''
  releaseVersion: ''
  releaseVersionMsi: ''

pool:
  vmImage: windows-latest

stages:
# Stage Alpha
# Only run for development branch
- stage: Alpha
  condition: in(variables['Build.SourceBranch'], 'refs/heads/development')
  displayName: "Deploy to Alpha"
  jobs:
  # Build and Publish Alpha Executables and Installers
  - job: BuildAndPublishAlpha
    displayName: "Build and Publish Alpha Executables and Installers"
    steps:
    # Set Alpha Version Number
    - task: PowerShell@2
      displayName: 'Set Alpha Version Number'
      inputs:
        targetType: 'inline'
        script: |
          # Fetch the previous version from a file or a variable
          $previousVersion = "$(major).$(minor).$(patch)" # Default value if no previous version is found
          if (Test-Path "$(Build.ArtifactStagingDirectory)/previousVersion.txt") {
            $previousVersion = Get-Content "$(Build.ArtifactStagingDirectory)/currentVersion.txt"
          }

          # Split the previous version into major, minor, and patch
          $versionParts = $previousVersion -split '\.'
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]

          # Determine if the branch name starts with hotfix or HOTFIX
          if ($env:BUILD_SOURCEBRANCHNAME -match '^hotfix' -or $env:BUILD_SOURCEBRANCHNAME -match '^HOTFIX') {
            # Increment the patch version
            $patch++
          } else {
            # Increment the minor version
            $minor++
          }

          # Set the alpha version
          $alphaVersion = "v$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
          Write-Host "##vso[task.setvariable variable=alphaVersion]$alphaVersion"
          Write-Host "Alpha Version: $alphaVersion"
          $alphaVersionMsi = "$major.$minor.$patch-alpha.$env:BUILD_BUILDID"
          Write-Host "##vso[task.setvariable variable=alphaVersionMsi]$alphaVersionMsi"
          Write-Host "Alpha Version for MSI: $alphaVersionMsi"

          # Save the new version to a file for future reference
          $newVersion = "$major.$minor.$patch"
          Set-Content -Path "$(Build.ArtifactStagingDirectory)/currentVersion.txt" -Value $newVersion

    # Install SDK Using global.json
    - task: UseDotNet@2
      displayName: 'Install SDK Using global.json'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: $(Pipeline.Workspace)/s

    # Restore NuGet Packages
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # Build and publish Alpha executables
    - task: PowerShell@2
      displayName: 'Build and publish Alpha executables'
      inputs:
        targetType: 'inline'
        workingDirectory: $(Build.SourcesDirectory)/src/Qala.Cli
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          # Check if the pathToTheProjectFile file exists
          if (Test-Path $(pathToTheProjectFile)) {
              Write-Host "Qala.Cli.csproj file found."
          } else {
              Write-Host "Qala.Cli.csproj file not found."
              exit 1
          }
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Publishing Alpha version for runtime: $rid"
            dotnet publish $(pathToTheProjectFile) -r $rid --self-contained true -p:PublishSingleFile=true -o "$(Pipeline.Workspace)/alpha/$rid"
          }

    # Install WiX Toolset and UI extensions
    - task: PowerShell@2
      displayName: 'Install WiX Toolset and UI extensions'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        targetType: 'inline'
        script: |
          dotnet tool install --global wix
          wix extension add WixToolset.UI.wixext

    # Create installers for each runtime identifiers
    - task: PowerShell@2
      displayName: 'Create installers for each runtime identifiers'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        targetType: 'inline'
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Generating the msi file for runtime: $rid"
            $wixFileContent = Get-Content -Path $(pathToTheWiXFile)
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToExecutable = ").*?(?=" \?>)', "$(Pipeline.Workspace)/alpha/$rid/qala.exe"
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToConfig = ").*?(?=" \?>)', "$(Pipeline.Workspace)/alpha/$rid/config.yaml"
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToBat = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/qala.bat"
            $wixFileContent = $wixFileContent -replace '(?<=<\?define PathToProductResources = ").*?(?=" \?>)', "$(Build.SourcesDirectory)/build/wix/resources/"
            Set-Content -Path $(pathToTheWiXFile) -Value $wixFileContent
            wix build $(pathToTheWiXFile) -d Version=$(alphaVersionMsi) -ext WixToolset.UI.wixext -o "$(Pipeline.Workspace)/alpha/$rid/QalaCliInstaller-$(alphaVersionMsi)-$rid.msi"
          }

    # Move all installers and executables to the artifact staging directory
    - task: PowerShell@2
      displayName: 'Move all installers and executables to the artifact staging directory'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetType: 'inline'
        script: |
          $runtimeIdentifiers = "$(runtimeIdentifiers)".Split(";")
          foreach ($rid in $runtimeIdentifiers) {
            Write-Host "Moving installer and executables for runtime: $rid"
            Move-Item -Path "$(Pipeline.Workspace)/alpha/$rid/QalaCliInstaller-$(alphaVersionMsi)-$rid.msi" -Destination "$(Build.ArtifactStagingDirectory)/alpha/$rid" -Force
            Move-Item -Path "$(Pipeline.Workspace)/alpha/$rid/qala.exe" -Destination "$(Build.ArtifactStagingDirectory)/alpha/$rid" -Force
          }

    # Create GitHub Alpha Release
    - task: GithubRelease@1 
      displayName: 'Create GitHub Alpha Release'
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        gitHubConnection: '$(gitHubConnection)'
        repositoryName: '$(repositoryName)'
        target: '$(Build.SourceBranchName)'
        tagSource: 'userSpecifiedTag'
        tag: "$(alphaVersion)"
        isPreRelease: true
        title: 'Alpha Release $(alphaVersion)'   
        assets: $(Build.ArtifactStagingDirectory)/publish/*